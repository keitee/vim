" vimrc for vim
"
"
" {===========================================================================
" general settings

" detect OS
let s:is_windows = has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_macvim = has('gui_macvim')

" set font and size
if has("gui_running")
  if has("gui_gtk2")
    " set guifont=FreeMono\ 12    " for ubuntu
    " set guifont=DroidSansMono   " for debian
    " set guifont=Hack            " for debian
    " set guifont=D2Coding\ 11    " for debian
    set guifont=D2Coding          " for debian
  endif
endif


" Be iMproved
" Compatible mode means compatibility to venerable old vi. When you :set
" compatible, all the enhancements and improvements of Vi Improved are turned
" off. It's not recommended to do this, but some systems provide (mostly for
" backwards compatibility with old Unix systems) a vi command that is
" implemented with Vim in compatible mode.
"
" Note that once a personal initialization file ~/.vimrc exists, Vim
" automatically turns on 'nocompatible' mode, so this usually is nothing to
" worry about. For the full story, :help 'compatible' has all the details.

if has('vim_starting')
   set nocompatible
endif


" {===========================================================================
" edit settings

" In vim 7.3.74 and higher you can do following `to alias` unnamed register to
" the + register, which is the system clipboard. By doing this, don't need to
" "+p but use p to make it available to other application in the system and vice
" versa.

set clipboard=unnamedplus

" for user syntax
syntax enable

" for showmatch
set showmatch

" set ignorecase
set smartcase

" line number. set number
set nu
set autoindent
set cindent

" show editing mode
set showmode

" show autocomplete menus
set wildmenu
set cursorline
set autoread
set autowrite
set nowrapscan
set foldenable
" for line wrapping and linebreak
set nowrap linebreak nolist

" remove _ from keyword set
" set iskeyword-=_ 


" {===========================================================================
" edit, indent, tabs settings

set smartindent
set shiftwidth=2 
set tabstop=2 
set softtabstop=2
set expandtab
set textwidth=80
set fo+=l
set colorcolumn=80

scriptencoding utf-8
set encoding=utf-8

" Every tab is displayed as ^I and a $ is displayed at the end of each line. To
" change this:
set listchars=tab:»\ ,eol:¬

"set showbreak=«\ 
set showbreak=<< 


" {===========================================================================
" window settings
" https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
" Easier split navigations
" We can use different key mappings for easy navigation between splits to save a
" keystroke. So instead of ctrl-w then j, it’s just ctrl-j:

nnoremap <C-j> <C-W><C-j>
nnoremap <C-k> <C-W><C-k>

" these do not work. why?
nnoremap <C-l> <C-W><C-l>
nnoremap <C-h> <C-W><C-h>


" {===========================================================================
" search settings

set incsearch
set hlsearch
" <C-u> is scroll up. <C-l> clears and redraws the screen (see :h CTRL-L). This
" mapping builds on top of the usual behavior by muting search highlighting.
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" search for visual selection
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction


" {===========================================================================
" spell settings
set spelllang=en_gb
set spellfile=~/.vim/spell/en.utf-8.add 
   
" utility mappings {{{
" to wrap a word with ' or " current time
map <F5> i'<Esc>ea'<Esc>
map <F6> i"<Esc>ea"<Esc>


" scroll
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
nnoremap <silent> <C-d> <C-d>zz
nnoremap <silent> <C-u> <C-u>zz

" quickfix
nmap <F2> :copen<CR>
nmap <F4> :cclose<CR>
nnoremap <C-n> :cn<CR>
nnoremap <C-p> :cp<CR>


" tag completion
inoremap <c-x> <c-]> <c-]>


" more match chars
set matchpairs+=<:>


" solarized colorscheme 
" NeoBundleLazy 'altercation/vim-colors-solarized', {'autoload':{'insert':1}}
if has('gui_running')
   set background=dark
   colorscheme solarized
   " colorscheme jellybeans
else
   colorscheme torte
endif


if s:is_windows != 1
  " echom prints mesg on a console for linux and shows a diaglog for windows
  echom '+linux'

  " Required! why? if not, using ohter plugins do not work properly
  filetype plugin indent on


  " Installing plugins
  " With vim-plug, you declare the list of plugins you want to use in your Vim
  " configuration file. It's ~/.vimrc for ordinary Vim, and
  " ~/.local/share/nvim/site/autoload/plug.vim for Neovim. The list should start
  " with call plug#begin(PLUGIN_DIRECTORY) and end with call plug#end().
  "
  " Plugins will be downloaded under the specified directory.
  call plug#begin('~/.vim/plugged') 

  " {===========================================================================
  " plugins

  " Declare the list of plugins.
  
  " {{{
  " "plugin-indent-guide"
  "
  " note: this is slow so plan not to use it
  " https://github.com/Yggdroot/indentLine
  " NeoBundle 'Yggdroot/indentLine'
  
  " https://github.com/nathanaelkane/vim-indent-guides
  " :help indent-guides
  Plug 'nathanaelkane/vim-indent-guides'

  " Use this option to customize the size of the indent guide.
  let g:indent_guides_guide_size = 1
  
  " Use this option to control which indent level to start showing guides from.
  let g:indent_guides_start_level = 2
  
  " to define custom colors instead of using the ones the plugin automatically
  " generates for you let g:indent_guides_auto_colors = 0
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  " }}}

  " {{{
  " "plugin-fzf"
  " PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script
  " Both options are optional. You don't have to install fzf in ~/.fzf
  " and you don't have to run the install script if you use fzf only in Vim.
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  " An action can be a reference to a function that processes selected lines
  function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
  endfunction

  let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
  " }}}
  
  " {{{
  " "plugin-tagbar"
  " http://majutsushi.github.io/tagbar/
  " https://vimawesome.com/plugin/tagbar
  " use ctag

  Plug 'majutsushi/tagbar'

  " <Space>
  " Display the prototype of the current tag (i.e. the line defining it) 
  " in the command line.
  " Map option: tagbar_map_showproto
  "
  " nnoremap <silent> [unite]tb :TagbarToggle<cr>
  " note: outline is better since do not use hotfix windows and do not move to
  " the windows to search a tag
  " tag current file
  " nnoremap <silent> [unite]tf :Gtags -f %<CR>
  " }}}

  " {{{
  " "plugin-airline" status line
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  
  " The default setting of 'laststatus' is for the statusline to not appear
  " until a split is created. If you want it to appear all the time, add the
  " following to your vimrc: set laststatus=2
  set laststatus=2
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_sep=' '
  let g:airline#extensions#tabline#left_alt_sep='¦'

  " Finally, you can add the convenience variable let g:airline_powerline_fonts
  " = 1 to your vimrc which will automatically populate the g:airline_symbols
  " dictionary with the powerline symbols.
  let g:airline_powerline_fonts = 1
  let g:airline_theme='dark'
  let g:airline_left_sep='>'
  " }}}
  
  " " {{{
  " " "plugin-lightline" status line
  " " https://github.com/itchyny/lightline.vim
  " Plug 'itchyny/lightline.vim'
  " let g:lightline = {
  "   \     'active': {
  "   \         'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
  "   \         'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
  "   \     }
  "   \ }
  " " }}}
  
  " {{{
  " "plugin-cxx" 
  " plugin: vim-cpp-modern: Enhanced C and C++ syntax highlighting {{{
  " https://github.com/bfrg/vim-cpp-modern
  Plug 'bfrg/vim-cpp-modern' 
  let g:syntastic_error_symbol = '?'
  let g:syntastic_style_error_symbol = '?'
  let g:syntastic_warning_symbol = '?'
  let g:syntastic_style_warning_symbol = '$'
  " }}}
 
  " {{{
  " "plugin-cxx-comment" 
  " commentary.vim
  "
  " Comment stuff out. Use gcc to comment out a line (takes a count), gc to
  " comment out the target of a motion (for example, gcap to comment out a
  " paragraph), gc in visual mode to comment out the selection, and gc in operator
  " pending mode to target a comment. You can also use it as a command, either
  " with a range like :7,17Commentary, or as part of a :global invocation like
  " with :g/TODO/Commentary. That's it.
  "
  " https://github.com/tpope/vim-commentary/issues/30
  " to use '//' instead of '/* */'
  "
  " You can have // by default if you 
  " setlocal commentstring=//\ %s in after/ftplugin/c.vim. 
  " There is no support for a multiline mode.
  " echom '+commentary'
  Plug 'tpope/vim-commentary'
  set commentstring=//\ %s
  " }}}
  

  " {{{
  " "plugin-cxx-complete" 
  " commentary.vim
  Plug 'Valloric/YouCompleteMe'
  let g:ycm_complete_in_comments_and_strings=1
  "let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
  "let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
  let g:ycm_filetype_blacklist={'unite': 1}
  " }}}


  " {{{
  " "plugin-git" 
  " Limit line length of git commits to 72 cols
  au FileType gitcommit set tw=80
  
  " https://github.com/tpope/vim-fugitive
  Plug 'tpope/vim-fugitive'
  
  " A Vim plugin which shows a git diff in the 'gutter' (sign column). It shows
  " whether each line has been added, modified, and where lines have been removed.
  " You can also stage and revert individual hunks.
  " https://github.com/airblade/vim-gitgutter
  Plug 'airblade/vim-gitgutter'

  " to turn on vim-gitgutter by default
  let g:gitgutter_enabled = 1

  " to turn on line highlighting by default
  " let g:gitgutter_highlight_lines = 1

  " When you make a change to a file tracked by git, the diff markers should
  " appear automatically. The delay is governed by vim's updatetime option; the
  " default value is 4000, i.e. 4 seconds, but I suggest reducing it to around
  " 100ms
  set updatetime=100
  
  " You can jump between hunks (by default):
  " jump to next hunk (change)    : ]c
  " jump to previous hunk (change): [c.
  
  " Folding
  " Use the GitGutterFold command to fold all unchanged lines, leaving just the
  " hunks visible. Use zr to unfold 3 lines of context above and below a hunk.
  " Execute GitGutterFold a second time to restore the previous view.
  " }}}

  " List ends here. Plugins become visible to Vim after this call.
  call plug#end()


  " After adding the above to the top of your Vim configuration file, reload it
  " (:source ~/.vimrc) or restart Vim. Now run :PlugInstall to install the
  " plugins.

  " Updating plugins
  " Run :PlugUpdate to update the plugins. After the update is finished, you can
  " review the changes by pressing D in the window. Or you can do it later by
  " running :PlugDiff.
  " 
  " Reviewing the changes 
  " Updated plugins may have new bugs and no longer work correctly. With
  " :PlugDiff command you can review the changes from the last :PlugUpdate and
  " roll each plugin back to the previous state before the update by pressing X
  " on each paragraph.
  " 
  " Removing plugins 
  " Delete or comment out Plug commands for the plugins you want to remove.
  " Reload vimrc (:source ~/.vimrc) or restart Vim Run :PlugClean. It will
  " detect and remove undeclared plugins.
  
  
  " {===========================================================================
  " Mapping :nmap <silent> <Leader>ig <NeoBundle>IndentGuidesToggle }}}
  " to change default key mappings. see unite-key-mappings
  " function! s:unite_settings()
  "   nmap <buffer> Q <plug>(unite_exit)
  "   nmap <buffer> <esc> <plug>(unite_exit)
  "   imap <buffer> <esc> <plug>(unite_exit)
  " endfunction
  " autocmd FileType unite call s:unite_settings()

  nnoremap [unite] <nop>
  nmap <space> [unite]

  " "mappings-gtag"
  " (tag pattern) picks up the cword and shows a prompt for a pattern
  nnoremap <silent> [unite]tp :Gtags<CR>
  " (tag (current) word) no prompt
  " nnoremap <silent> [unite]tw :Gtags <c-r><c-w><CR>
  nnoremap <silent> [unite]tw :GtagsCursor<CR>
  " (tag reference) 
  nnoremap <silent> [unite]tr :Gtags -r <c-r><c-w><CR>
  " (tag grep) 
  nnoremap <silent> [unite]tg :Gtags -g <c-r><c-w><CR>
  " tag selection. do NOT work?
  " vnoremap <silent> [unite]gs <ESC>:Gtags .GetVisualSelection()<CR>
  " (tag bar) 
  nnoremap <silent> [unite]tb :TagbarToggle<CR>

  " "mappings-fzf"
  "
  " Search syntax
  "
  " Unless otherwise specified, fzf starts in "extended-search mode" where you
  " can type in multiple search terms delimited by spaces. e.g. ^music .mp3$
  " sbtrkt !fire
  "
  " Token     Match type                  Description
  "
  " sbtrkt  fuzzy-match                   Items that match sbtrkt
  " 'wild   exact-match (quoted)          Items that include wild
  " ^music  prefix-exact-match            Items that start with music
  " .mp3$   suffix-exact-match            Items that end with .mp3
  " !fire   inverse-exact-match           Items that do not include fire
  " !^music   inverse-prefix-exact-match  Items that do not start with music
  " !.mp3$    inverse-suffix-exact-match  Items that do not end with .mp3
  "
  " If you don't prefer fuzzy matching and do not wish to "quote" every word,
  " start fzf with -e or --exact option. Note that when --exact is set, '-prefix
  " "unquotes" the term.
  " 
  " A single bar character term acts as an "OR operator". For example, the
  " following query matches entries that start with core and end with either go,
  " rb, or py.
  " 
  " ^core go$ | rb$ | py$
  

  " (fz files) Lines in the current buffer nnoremap <silent> [unite]ff
  " :Files<CR> but I use this so often that I’ve mapped it to a single key.
  map ; :Files<CR>

  " BLines [QUERY]
  " (fz lines) Lines in the current buffer
  nnoremap <silent> [unite]l :BLines<CR>
  " (fz lines word) Lines in the current buffer for current word
  nnoremap <silent> [unite]lw :BLines <c-r><c-w><CR>

  " (fz recent files) v:oldfiles and open buffers
  nnoremap <silent> [unite]r :History<CR>

  " (fz buffers) Buffers
  nnoremap <silent> [unite]b :Buffers<CR>

  " (fz windows) Windows
  nnoremap <silent> [unite]w :Windows<CR>

  " (fz history) Search history
  nnoremap <silent> [unite]h :History/<CR>

  " (fz command) Command history (not work. ??)
  nnoremap <silent> [unite]c :History:<CR>

  " (fz marks) Marks
  nnoremap <silent> [unite]m :Marks<CR>

  " (fz grep) Ag grep
  " nnoremap <silent> [unite]fg :Ag <CR>
  nnoremap <silent> [unite]fg :Ag <c-r><c-w><CR>

  " "mappings-edit"
  " (show invisibles) toggle set list/nolist
  nnoremap <silent> [unite]sv :set list!<cr>
  " (tab open)
  nnoremap <silent> [unite]to :tabnew<cr>
  " (tab close)
  nnoremap <silent> [unite]tc :tabclose<cr>
  " (copy filename) 
  nnoremap <silent> [unite]cf :let @+ = expand("%")<CR>

  " "mappings-indent-guide"
  " (fz files) Lines in the current buffer
  nnoremap <silent> [unite]<TAB> :IndentGuidesToggle<CR>
  
  " "mappings-nds-log"
  " (nds file type) toggle
  nnoremap <silent> [unite]n :set ft=nds<cr>
  nnoremap <silent> [unite]nn :set ft=<cr>
  " (nds date) show date 
  nnoremap <silent> [unite]nd :syn clear ndsFieldDate<cr>
  nnoremap <silent> [unite]nt :syn clear ndsFieldTime<cr>

  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-j> <plug>(fzf-complete-file-ag)

  " Advanced customization using autoload functions
  inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

endif

