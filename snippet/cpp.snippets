priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p


# returns args[0] when arglist has one element since len(args) is 1

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

# /**
# * @brief: brief
# *
# * @param: param
# *
# * @return: ReturnType
# */
# ReturnType FunctionName(param)
# {
#   FunctionBody
# }

snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

#  4.4.3 Python:                                             *UltiSnips-python*
# 
# Python interpolation is by far the most powerful. The syntax is similar to Vim
# scripts except code is started with '!p'. Python scripts can be run using the
# python shebang '#!/usr/bin/python', but using the '!p' format comes with some
# predefined objects and variables, which can simplify and shorten code. For
# example, a 'snip' object instance is implied in python code. Python code using
# the '!p' indicator differs also in another way. Generally when a snippet is
# expanded the standard output of code replaces the code. With python code the
# value of the 'snip.rv' property replaces the code. Standard output is ignored.
# 
# The variables automatically defined in python code are: >
# 
#    t       - The values of the placeholders, t[1] is the text of ${1}, etc.
#    snip    - UltiSnips.TextObjects.SnippetUtil object instance. Has methods
#              that simplify indentation handling and owns the string that
#              should be inserted for the snippet.

#    snip.fn:
#        The current filename.
#
#  4.1.3 Snippet Options:                           *UltiSnips-snippet-options*
# 
# The 'options' control the behavior of the snippet. Options are indicated by
# single characters. The 'options' characters for a snippet are combined into
# a word without spaces.
# 
# The options currently supported are: >
#    b   Beginning of line - A snippet with this option is expanded only if the
#        tab trigger is the first word on the line. In other words, if only
#        whitespace precedes the tab trigger, expand. The default is to expand
#        snippets at any position regardless of the preceding non-whitespace
#        characters.

# SYNTAX
# 
# http://vimcasts.org/episodes/meet-ultisnips/
# 
# A tabstop is a location that we can jump to when the snippet is activated
# (:h UltiSnips-tabstops). UltiSnips lets us define tabstops sequentially
# using $1, $2, $3, and so on. The $0 tabstop is special: it defines the final
# position of the cursor, regardless of how many tabstops you specify.We can
# use placeholders to provide default text for a tabstop. For example, to make
# tabstop one default to “Insert a title”, we would change $1 to:
# 
# ${1:Insert a title}
# 

snippet head "file header" b
/*
 File    : `!p snip.rv = fn`
 Created : `date +%m/%d/%Y` 

 Copyright © 2019 Sky UK. All rights reserved.
*/
${0}
endsnippet

snippet fni "function internal" b
/* ={--------------------------------------------------------------------------
 @brief :
  ${1:...}

 @note  :
  ${2}
*/
endsnippet

snippet fne "function external" b
/* ={==========================================================================
 @brief :
  ${1:...}

 @note  :
  ${2}
*/
endsnippet

# vim:ft=snippets:
