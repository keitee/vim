# ={========================================================================== 
# *tmux-why* 
#
# http://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/
# 
# If you've ever worked with remote servers or a Raspberry Pi over ssh you can
# guess where this will be useful: When you lose your ssh connection the tmux
# session will simply be detached but will keep running on the server in the
# background including all the processes that run within your session. To
# continue your session simply ssh to the server again and attach to the running
# session.
# 
# But tmux is not only helpful when working on a remote machine. Not only for
# its window management features but also for the session handling. Personally I
# find myself detaching from sessions when I’m switching context. I’ll just
# start a new session for my new task and attach to the old session whenever I
# want to continue with my old task.
# 
# You see that tmux basically offers two big features: Window management in your
# terminal and session management. 
# 
# Just a small hint: Look into tmuxinator. It let's you re-recreate complex tmux
# layouts using a simple config file.


# ={========================================================================== 
# *tmux-tmuxinator* 
#
# https://github.com/tmuxinator/tmuxinator
#
# get the latest but requires ruby udpate:
# 
# Fetching: tmuxinator-1.1.1.gem (100%)
# ERROR:  Error installing tmuxinator:
# 	tmuxinator requires Ruby version >= 2.4.6.
# 
# https://linuxize.com/post/how-to-install-ruby-on-debian-9/
#
# to install shims:
# gem install bundler
# then add path:
#  export PATH=/home/keitee/.rbenv/shims:$PATH
#
# exmple:
#
# o Each window is denoted by a YAML array entry, followed by a `name` and
#   `command` to be run.
#
# windows:
#   - editor:
#       layout: main-vertical
#       root: ~/git/kb
#       panes:
#         - vim
#         - guard
#   - server: bundle exec rails s
#   - logs: tail -f log/development.log


# ={========================================================================== 
# *tmux-reference* 
#
# Remote Pair Programming Made Easy with SSH and tmux
# http://www.hamvocke.com/blog/remote-pair-programming-with-tmux/
# 
# wemux enhances tmux to make multi-user terminal multiplexing both easier and
# more powerful. It allows users to host a wemux server and have clients join in
# either: 
# https://github.com/zolrath/wemux


# ={========================================================================== 
# *tmux-install* 
#
# https://github.com/tmux/tmux
# sudo apt-get install tmux
# tmux -V


# ={========================================================================== 
# *tmux-reference* 
#
# https://medium.freecodecamp.org/tmux-in-practice-series-of-posts-ae34f16cfab0

# Part 1. Tmux in practice: explores local and nested remote tmux sessions. It
# also discusses tmux features in general, their relevance for local and remote
# scenarios, and how to setup and configure tmux to support nested sessions.
# 
# 
# Part 3. tmux in practice: scrollback buffer. Explores the difference between
# terminal and tmux scrollback buffers. Shows how to tweak copy mode, scroll,
# and mouse selection tmux behavior.
# 
# Part 4. tmux in practice: integration with system clipboard. Builds a bridge
# between the tmux copy buffer and system clipboard, to store selected text on
# OSX or Linux system clipboard in a way that addresses both local and remote
# usage scenarios.
# 
# Part 5. tmux in practice: copy text from remote session using SSH remote
# tunnel and systemd service. Yet another way to copy text from remote session
# into local clipboard.
#
# http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
# Everything you need to know about Tmux copy paste - Ubuntu


# ={========================================================================== 
# *tmux-prefix*
# 1. Consider remapping CAPSLOCK to CONTROL within your operating system.
# 2. Consider remapping CTRL-b to CTRL-a within your operating system.
#
# remap default prefix, C-b to C-a. However, tool-screen uses C-a so change
# screen key mapping
# https://superuser.com/questions/422126/remap-ctrl-a-in-gnu-screen
# To make it CTRL+J, use the following in .screenrc.
# escape ^Jj


# ={========================================================================== 
# *tmux-option*
#
# OPTIONS
#      The appearance and behaviour of tmux may be modified by changing the
#      value of various options. There are four types of option: server
#      options, session options window options and pane options.
# 
#      The tmux server has a set of global options which do not apply to any
#      particular window or session or pane.  These are altered with the
#      set-option -s command, or displayed with the show-options -s command.
#
#     Commands which set options are as follows:
#
#     set-option [-aFgopqsuw] [-t target-pane] option value
#                   (alias: set)
#
#             Set a pane option with -p, a window option with -w, a server
#             option with -s, otherwise a session option.  If the option is not
#             a user option, -w or -s may be unnecessary - tmux will infer the
#             type from the option name, assuming -w for pane options.
#
#             If -g is given, the global session or window option is set.
#
#             -F expands formats in the option value.  The -u flag unsets an
#             option, so a session inherits the option from the global options
#             (or with -g, restores a global option to the default).
#
#             The -o flag prevents setting an option that is already set and the
#             -q flag suppresses errors about unknown or ambiguous options.
#
#             With -a, and if the option expects a string or a style, value is
#             appended to the existing setting.  For example:
#
#                   set -g status-left "foo" set -ag status-left "bar"
#
#             Will result in ‘foobar’.  And:
#
#                   set -g status-style "bg=red" set -ag status-style "fg=blue"
#
#             Will result in a red background and blue foreground.  Without -a,
#             the result would be the default background and a blue foreground.

# The important thing to internalize is that a tmux configuration consists of
# setting server options (set-option -s), global session (set-option -g), and
# window options (set-window-option -g).

set -g prefix C-a
unbind C-b
bind C-a send-prefix


# ={========================================================================== 
# *tmux-binding*
#
# DEFAULT KEY BINDINGS
#      tmux may be controlled from an attached client by using a key combination
#      of a prefix key, ‘C-b’ (Ctrl-b) by default, followed by a command key.
# 
#      The default command key bindings are:
# 
#            C-b         Send the prefix key (C-b) through to the application.
#            C-o         Rotate the panes in the current window forwards.
#            C-z         Suspend the tmux client.
#            !           Break the current pane out of the window.

#            "           Split the current pane into two, top and bottom.
#            #           List all paste buffers.

#            $           Rename the current session.
#            %           Split the current pane into two, left and right.
#            &           Kill the current window.
#            '           Prompt for a window index to select.
#            (           Switch the attached client to the previous session.
#            )           Switch the attached client to the next session.

#            ,           Rename the current window.

#            -           Delete the most recently copied buffer of text.
#            .           Prompt for an index to move the current window.
#            0 to 9      Select windows 0 to 9.
#            :           Enter the tmux command prompt.
#            ;           Move to the previously active pane.
#            =           Choose which buffer to paste interactively from a list.

#            ?           List all key bindings.

#            D           Choose a client to detach.
#            L           Switch the attached client back to the last session.
#            [           Enter copy mode to copy text or view the history.
#            ]           Paste the most recently copied buffer of text.

#            c           Create a new window.

#            d           Detach the current client.
#            f           Prompt to search for text in open windows.
#            i           Display some information about the current window.
#            l           Move to the previously selected window.
#            n           Change to the next window.
#            o           Select the next pane in the current window.
#            p           Change to the previous window.
#            q           Briefly display pane indexes.
#            r           Force redraw of the attached client.
#            m           Mark the current pane (see select-pane -m).
#            M           Clear the marked pane.
#            s           Select a new session for the attached client interac‐
#                        tively.
#            t           Show the time.
#            w           Choose the current window interactively.
#            x           Kill the current pane.
#            z           Toggle zoom state of the current pane.
#            {           Swap the current pane with the previous pane.
#            }           Swap the current pane with the next pane.
#            ~           Show previous messages from tmux, if any.
#            Page Up     Enter copy mode and scroll one page up.
#            Up, Down
#
# ex:
#      bind -T copy-mode-vi Up               send-keys -X scroll-up
#
#      bind-key [-nr] [-T key-table] key command [arguments]
#                    (`alias: bind`)
# 
#              prefix key table vs root table
# 
#              Bind key key to command.  Keys are bound in a key table.  By
#              default (without -T), the key is bound in `the prefix key table.`
#              This table is used for keys pressed after the prefix key (for
#              example, by default ‘c’ is bound to new-window in the prefix
#              table, so ‘C-b c’ creates a new window). 

#              `The root table` is used for keys pressed without the prefix key:
#              binding ‘c’ to new-window in the root table (not recommended)
#              means a plain ‘c’ will create a new window. 
#
#              `-n is an alias for -T root.`
#
#              Keys may also be bound in custom key tables and the switch-client
#              -T command used to switch to them from a key binding.  The -r
#              flag indicates this key may repeat, see the repeat-time option.
# 
#              To view the default bindings and possible commands, see the
#              list-keys command.


# COMMAND PARSING AND EXECUTION
#     tmux supports a large number of commands which can be used to control its
#     behaviour.  Each command is named and can accept zero or more flags and
#     arguments.  They may be bound to a key with the bind-key command or run
# 
#           bind-key C set-option -g status-style bg=cyan
#
#     Here, the command name is ‘set-option’, ‘-g’ is a flag and ‘status-style’
#     and ‘bg=cyan’ are arguments.
#
#     can run the command in the shell:
#
#     $ tmux list-keys


# ={========================================================================== 
# *tmux-move* *tmux-session* *tmux-window* *tmux-pane*
#
# A tmux session is, put simply, and container for windows and panes. A window
# contains one or more panes.
# 
# tmux new -s session_name
#     creates a new tmux session named session_name
# 
# tmux attach -t session_name
#     attaches to an existing tmux session named session_name
# tmux a
#     attaches t the first available session.
# 
# tmux switch -t session_name
#     switches to an existing session named session_name
# 
# tmux list-sessions
# tmux ls
#     lists existing tmux sessions
# 
# tmux detach (prefix + d)
# 
# tmux kill-session -t session-name


# ={========================================================================== 
# *tmux-source* 
# Force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf\; display "~/.tmux.conf sourced!"


# ={========================================================================== 
# *tmux-window*
#
# WINDOWS AND PANES
#      A tmux window may be in one of two modes.  The default permits direct
#      access to the terminal attached to the window.  

#      The other is copy mode, which permits a section of a window or its
#      history to be copied to a paste buffer for later insertion into another
#      window. This mode is entered with the copy-mode command, bound to ‘[’ by
#      default. It is also entered when a command that produces output, such as
#      list-keys, is exe‐ cuted from a key binding.
# 
#      In copy mode an indicator is displayed in *the top-right corner* of the
#      pane with the current position and the number of lines in the history.
# 
#      *Commands are sent to copy mode using the -X flag to the send-keys
#      command.*
#
#      When a key is pressed, copy mode automatically uses one of *two key tables*
#      depending on the mode-keys option: copy-mode for emacs, or
#      copy-mode-vi for vi. Key tables may be viewed with the list-keys com‐
#      mand.
# 
#      The following commands are supported in copy mode:
#
#      The ‘-and-cancel’ variants of some commands exit copy mode after they
#      have completed (for copy commands) or when the cursor reaches the bottom
#      (for scrolling commands).  
#
#      ‘-no-clear’ variants do not clear the selection.

# Window indexes are numbers tmux uses to determine ordering. The first window’s
# index is 0, unless you set it via base-index in your configuration. I usually
# set -g base-index 1 in my tmux configuration, since 0 is after 9 on the
# keyboard.
set -g base-index 1

# *tmux-binding-window*
#
# crate a window:
#
# bind-key    -T prefix       c                 new-window
#
#
# rename window title:
#
# bind-key    -T prefix       ,                 command-prompt -I "#W" "rename-window -- '%%'"
#
#
# traverse windows:
#
# bind-key    -T prefix       0                 select-window -t :=0
# bind-key    -T prefix       1                 select-window -t :=1
# bind-key    -T prefix       2                 select-window -t :=2
# bind-key    -T prefix       3                 select-window -t :=3
# bind-key    -T prefix       4                 select-window -t :=4
# bind-key    -T prefix       5                 select-window -t :=5
# bind-key    -T prefix       6                 select-window -t :=6
# bind-key    -T prefix       7                 select-window -t :=7
# bind-key    -T prefix       8                 select-window -t :=8
# bind-key    -T prefix       9                 select-window -t :=9
# 
# bind-key    -T prefix       n                 next-window
# bind-key    -T prefix       p                 previous-window
#
#
# use many windows:
#
# Prompt for a window index (useful for indexes greater than 9) with Prefix + '.
# If the window index is 10 or above, this will help you a lot.
#
# bind-key    -T prefix       '                 command-prompt -p index "select-window -t ':%%'"
# 
# bind-key    -T prefix       f                 command-prompt "find-window '%%'"
# 
# bind-key    -T prefix       w                 choose-tree -w
#
# bind-key    -T prefix       &                 confirm-before -p "kill-window #W? (y/n)" kill-window


# *tmux-pane*
#
# create a pane
# split the current pane into two, top and bottom.
# bind-key    -T prefix       "                 split-window
# split the current pane into two, left and right.
# bind-key    -T prefix       %                 split-window -h


# pane navigation as vim
# Set a window option with -w (equivalent to the set-window-option command), 
setw -g mode-keys vi
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key h
bind-key h select-pane -L
unbind-key l
bind-key l select-pane -R

# To zoom in on a pane, navigate to it and do Prefix + z.
# You can unzoom by pressing Prefix + z again.
# bind-key    -T prefix       z                 resize-pane -Z


# resizing panes:
# bind-key -r -T prefix       M-Up              resize-pane -U 5
# bind-key -r -T prefix       M-Down            resize-pane -D 5
# bind-key -r -T prefix       M-Left            resize-pane -L 5
# bind-key -r -T prefix       M-Right           resize-pane -R 5


# layouts:
# bind m set-window-option main-pane-height 60\; select-layout main-horizontal
#
# This allows you to set a main-horizontal layout and automatically set the
# bottom panes proportionally on the bottom every time you do Prefix + m.

# prefix + = to have the same key as vim
bind-key    -T prefix       =               select-layout even-vertical


# close a pane
# bind-key    -T prefix       x                 confirm-before -p "kill-pane #P? (y/n)" kill-pane
# by Ctrl + d within the pane’s shell.

# close a window
# bind-key    -T prefix       &                 confirm-before -p "kill-window #W? (y/n)" kill-window


# ={========================================================================== 
# *tmux-copy* copy mode mappings
#
# typical copy mode use:
#
# Now you can enter copy mode by pressing CTRL+b,[, and then go to start point,
# press ‘v’ and start copying. After you have selected text you want to copy,
# you can just press ‘y’ (or the default ‘enter’ key) to copy the text into
# Tmux’s buffer. This is exactly the commands you would use in Vim to copy text.
# To paste, press CTRL+b, P.

# https://medium.freecodecamp.org/tmux-in-practice-scrollback-buffer-47d5ffa71c93
# tmux in practice: the scrollback buffer
# 
# This is 3rd part of my tmux in practice article series.
# 
# Usually terminal emulators implement scrollback buffer, so you can explore
# past output, when it moves out of view. tmux, like other full-screen terminal
# applications like vim, runs in so-called alternate screen buffer of a parent
# terminal. Alternate buffer has exact width and height dimensions as physical
# window size.
# 
# There are several effects of using alternate buffer:
# 
# Any output, that exceeds visible part of alternate buffer, is lost. As soon as
# lines go out of view, they are lost. To prevent history loss, tmux implements
# it’s own “inner” scrollback buffer. The consequence of this is that you cannot
# work with tmux inner scrollback same as you usually do within your terminal.
# 
# Any output produced inside tmux (the same is true for vim, nano, man, less,
# and so on) does not spill over into the outer terminal’s scrollback history.
# When you close your full-screen app, you get back to the same state when you
# launched the app and don’t see output from inside the app any more.
# 
#
# In practice, if you get used to scroll back using ⌘↑ in your iTerm and if
# you’re going to do the same inside running tmux session, you will control and
# scroll the outer iTerm’s scrollback buffer, rather than the tmux’s inner
# scrollback buffer.
# 
# The solution is to use tmux specific controls to access its own scrollback
# buffer: Ctrl-b then [ to enter copy mode, use Down/Up arrows or PageDown and
# PageUp keys, q or Enter to exit copy mode.
# 
# Some people who find this annoying — configure tmux scrollback buffer to be
# allowed to be shown up in parent terminal scrollback buffer — so they can just
# use familiar scrolling controls. See this post. However, this solution is
# limited to having tmux session with 1 window and 1 pane only. And when you
# detach/close a tmux session, the parent terminal is polluted with tmux
# window’s output.
# 
# Personally, I use **tmux scrollback** without hacks above, but tweak it’s
# configuration to be more friendly and familiar.
# 
# First of all, I don’t like prefix,[ to enter copy mode. I’ve gotten used to ⌘↑
# to start scrolling in iTerm, and I’ve added following root keybinding:

# trigger copy mode by up arrow key. 
# note that termail uses shift-page up/down for scrolling but S-PageUp do not
# work in tmux.

# the original key binding is:
#            [           Enter copy mode to copy text or view the history.
unbind [
bind -n PageUp copy-mode

# Once you’re in copy mode, you can continue pressing M-Up to scroll 1 line up.
# The usual PageDown and PageUp controls are available to scroll by whole
# screen, and extra M-PageDown and M-PageUp to scroll by a half of screen
# (really convenient).

# Scroll up/down by 1 line, half screen, whole screen
# M-PageUp where M(eta) is Alt key

bind -T copy-mode-vi Up               send-keys -X scroll-up
bind -T copy-mode-vi Down             send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp         send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown       send-keys -X halfpage-down
bind -T copy-mode-vi PageDown         send-keys -X page-down
bind -T copy-mode-vi PageUp           send-keys -X page-up

# for selection
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection


# Well, now let’s talk about copying text once you’re in copy mode. I get used to
# copy text using mouse. Let’s enable mouse support:
#
#     mouse [on | off]
#             If on, tmux captures the mouse and allows mouse events to be
#             bound as key bindings. See the MOUSE SUPPORT section for
#             details.
# 
# MOUSE SUPPORT
#      If the mouse option is on (the default is off), tmux allows mouse events
#      to be bound as keys.  The name of each key is made up of a mouse event
#      (such as ‘MouseUp1’) and a location suffix, one of the following:


set -g mouse on


# Copy from tmux buffer to system buffer (clipboard)
#
# Since Linux and Mac OS X are *Nix based systems, many commands would work on
# both platforms. However, some commands may not available on both platforms,
# for example pbcopy and pbpaste. These commands are exclusively available only
# on Mac OS X platform. 
#
# The Pbcopy command will copy the standard input into clipboard. You can then
# paste the clipboard contents using Pbpaste command wherever you want. 

# Of course, there could be some Linux alternatives to the above commands, for
# example Xclip. The Xclip will do exactly same as Pbcopy. But, the
# distro-hoppers who switched to Linux from Mac OS would miss this command-pair
# and still prefer to use them. No worries! This brief tutorial describes how to
# use Pbcopy and Pbpaste commands on Linux.
#
# For this to happen, you need to install xclip on your computer. Do it as:
#
# sudo apt-get install --assume-yes xclip
#
#       xclip - command line interface to X selections (clipboard)
#
#       -selection
#              specify which X selection to use, options are "primary"  to  use
#              XA_PRIMARY  (default),  "secondary"  for  XA_SECONDARY or "clip‐
#              board" for XA_CLIPBOARD
#
#       -i, -in
#              read  text  into  X  selection  from  standard  input  or  files
#              (default)
#
#       -f, -filter
#              when  xclip  is  invoked in the in mode with output level set to
#              silent (the defaults), the filter option  will  cause  xclip  to
#              print the text piped to standard in back to standard out unmodi‐
#              fied


# But the problem is:
#
# By default, when you select text with the mouse in tmux, it get’s copied to
# buffer, and you’re immediately dropped out of the copy mode. Your current
# scroll position is reset by the end of the output, and you’re put in a command
# prompt mode.
#
# As you notice, each time I select text with the mouse, 
#
# **it kicks me off the copy mode.** 
#
# It’s really annoying. Usually when I’m stuck with some task, I tend to select
# some text here or there just to meditate (it helps me to focus on.) Or you
# might want just to select some text to highlight for you colleague sitting
# next to you.
#
# So let’s tweak this. We don’t want to be kicked off the copy mode. We don’t
# want the selection cleared on the mouse drag end event. Text from the
# selection can be copied on the mouse left click afterwards. drag selection.

unbind -T copy-mode-vi MouseDragEnd1Pane

# option 1:
#
# # bind -T copy-mode-vi MouseDown1Pane select-pane \;\
# #   send-keys -X copy-pipe "pbcopy" \;\
# #   send-keys -X clear-selection
# 
# # bind -T copy-mode-vi MouseDown1Pane select-pane \;\
# #   send-keys -X copy-pipe "xclip -selection clipboard" \;\
# #   send-keys -X clear-selection
# 
# # To access the copy buffer items and paste the most recent item, use C-p and p:
# # note that this is for pasting the text in tmux session.
# 
# unbind p
# bind p paste-buffer
# # bind C-p choose-buffer
# 
# # However, the above solution allow you to stay in copy mode but requires
# # further action to exit from copy mode, such as Enter key
# # bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"
# # copy tmux seleciton using keys into both primary and secondary 
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"


# option 2:
# this copy the selected when mouse drag ends and means exit copy mode and reset
# cursor posion to where it was.
#
# tmux copy mouse selected text to clipboard automatically on mouse release — 
# Stack Overflow — 
# https://stackoverflow.com/questions/36815879/tmux-copy-mouse-selected-text-to-clipboard-automatically-on-mouse-release

# copy the selection to primary as well so that can use SHIFT-INSERT to paste in
# tmux window/pane. If not have to use tmux paste command such as CTRL-p.
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -in -selection clipboard"

# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -selection clipboard"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard"

# ???
# to remain in copy mode, can use this with one of options above:
# just press SHIFT button when copying, and now you can copy as
# if Tmux doesn’t exist! :)

# keep this command to use SHIFT and Enter trick
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"


# Copy from a remote server
# Install xclip on the remote Ubuntu/Linux server, and add the line mentioned
# above (bind -t vi-copy y copy-pipe "xclip -sel clip -i") to ~/.tmux.conf on
# that server. Also, pass -X option when making SSH connection to the server,
# like so:
#
# ssh -X remoteuser@remotehost
#
# And after that everything you copy into remote’s Tmux buffer will get copied
# over to local clipboard. Magic!

# set -ags terminal-overrides ",xterm-*:csr@"


# ={========================================================================== 
# *tmux-logging*
#
# https://github.com/tmux-plugins/tmux-logging
# 
# cd ~/Downloads
# git clone https://github.com/tmux-plugins/tmux-logging
# 
# 1. Logging
# 
# Key binding: prefix + shift + p
# File path: $HOME (user home dir)
# File name format:
# 
# tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
# 
# tmux-my-session-0-1-20140527T165614.log
# 
# Toggles (start/stop) logging in the current pane.

# run-shell ~/Downloads/tmux-logging/logging.tmux


# ={========================================================================== 
# *tmux-statusline*
# Status bar customization

# Finding your current status line settings
# $ tmux show-options -g | grep status
#
# *tmux-reference*
# https://leanpub.com/the-tao-of-tmux/read#leanpub-auto-example-powerline

# set -g status-interval 2
# set -g status-right '#(powerline tmux right)'

set -g status on
set -g status-interval 1
set -g status-justify centre
set -g status-keys vi
set -g status-left "#[fg=green]#H #[fg=black]• #[fg=green,bright]#(uname -r | cut -\
c 1-6)#[default]"
set -g status-left-length 20
set -g status-left-style default
set -g status-position bottom
#set -g status-right "#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) #[fg=red,dim\
,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=de\
fault]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d"
set -g status-right-length 140
set -g status-right-style default
set -g status-style fg=colour136,bg=colour235

# default window title colors
set-window-option -g window-status-fg colour244  # base0
set-window-option -g window-status-bg default

# active window title colors
set-window-option -g window-status-current-fg colour166  # orange
set-window-option -g window-status-current-bg default
