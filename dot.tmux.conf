# ={========================================================================== 
# *tmux-why* 
#
# http://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/
# 
# If you've ever worked with remote servers or a Raspberry Pi over ssh you can
# guess where this will be useful: When you lose your ssh connection the tmux
# session will simply be detached but will keep running on the server in the
# background including all the processes that run within your session. To
# continue your session simply ssh to the server again and attach to the running
# session.
# 
# But tmux is not only helpful when working on a remote machine. Not only for
# its window management features but also for the session handling. Personally I
# find myself detaching from sessions when I’m switching context. I’ll just
# start a new session for my new task and attach to the old session whenever I
# want to continue with my old task.
# 
# You see that tmux basically offers two big features: Window management in your
# terminal and session management. 
# 
# Just a small hint: Look into tmuxinator. It let's you re-recreate complex tmux
# layouts using a simple config file.


# ={========================================================================== 
# *tmux-tmuxinator* 
#
# https://github.com/tmuxinator/tmuxinator
#
# get the latest but requires ruby udpate:
# 
# Fetching: tmuxinator-1.1.1.gem (100%)
# ERROR:  Error installing tmuxinator:
# 	tmuxinator requires Ruby version >= 2.4.6.
# 
# https://linuxize.com/post/how-to-install-ruby-on-debian-9/
#
# to install shims:
# gem install bundler
# then add path:
#  export PATH=/home/keitee/.rbenv/shims:$PATH
#
# exmple:
#
# o Each window is denoted by a YAML array entry, followed by a `name` and
#   `command` to be run.
#
# windows:
#   - editor:
#       layout: main-vertical
#       root: ~/git/kb
#       panes:
#         - vim
#         - guard
#   - server: bundle exec rails s
#   - logs: tail -f log/development.log


# ={========================================================================== 
# *tmux-reference* 
#
# Remote Pair Programming Made Easy with SSH and tmux
# http://www.hamvocke.com/blog/remote-pair-programming-with-tmux/
# 
# wemux enhances tmux to make multi-user terminal multiplexing both easier and
# more powerful. It allows users to host a wemux server and have clients join in
# either: 
# https://github.com/zolrath/wemux


# ={========================================================================== 
# *tmux-install* 
#
# https://github.com/tmux/tmux
# sudo apt-get install tmux
# tmux -V


# ={========================================================================== 
# *tmux-command* 
# 
# tmux command
#
# e.g., tmux list-keys


# ={========================================================================== 
# *tmux-reference* 
#
# https://medium.freecodecamp.org/tmux-in-practice-series-of-posts-ae34f16cfab0

# Part 1. Tmux in practice: explores local and nested remote tmux sessions. It
# also discusses tmux features in general, their relevance for local and remote
# scenarios, and how to setup and configure tmux to support nested sessions.
# 
# Part 2. tmux in practice: iTerm2 and tmux integration includes benefits and
# drawbacks of using iterm2 vs tmux locally. It shows how to set up iTerm2
# profile to override key mappings to trigger analogue tmux actions.
# 
# Part 3. tmux in practice: scrollback buffer. Explores the difference between
# terminal and tmux scrollback buffers. Shows how to tweak copy mode, scroll,
# and mouse selection tmux behavior.
# 
# Part 4. tmux in practice: integration with system clipboard. Builds a bridge
# between the tmux copy buffer and system clipboard, to store selected text on
# OSX or Linux system clipboard in a way that addresses both local and remote
# usage scenarios.
# 
# Part 5. tmux in practice: copy text from remote session using SSH remote
# tunnel and systemd service. Yet another way to copy text from remote session
# into local clipboard.
#
# http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
# Everything you need to know about Tmux copy paste - Ubuntu
#
# You can always copy stuff into clipboard while usin Tmux. “Why do I need a
# Tmux buffer then”, you might wonder. This is because, in your shell, the text
# you want to select might not fit in your current screen (e.g. output of cat
# /etc/passwd file). If you copy normally, you will only be able to copy text
# visible on your screen, and not the output which is ‘scrolled up’ due to a lot
# of output.

# Tmux Vim-bindings for copying into tmux buffer
#
# Note that for a newer tmux version (2.4 and above I think, not sure), the last
# three lines should be replaced with:
# 
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection
# bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
# 
# scenario:
#
# Now you can enter copy mode by pressing CTRL+b,[, and then go to start point,
# press ‘v’ and start copying. After you have selected text you want to copy,
# you can just press ‘y’ (or the default ‘enter’ key) to copy the text into
# Tmux’s buffer. This is exactly the commands you would use in Vim to copy text.
# To paste, press CTRL+b, P.
# 
# note that is for within tmx
# 
# <tmux-bind>
# 
#      bind-key [-nr] [-T key-table] key command [arguments]
#                    (`alias: bind`)
# 
#              // prefix key table vs root table
# 
#              Bind key key to command.  Keys are bound in a key table.  By
#              default (without -T), the key is bound in `the prefix key table.`
#              This table is used for keys pressed after the prefix key (for
#              example, by default ‘c’ is bound to new-window in the prefix
#              table, so ‘C-b c’ creates a new window). `The root table` is
#              used for keys pressed without the prefix key: binding ‘c’ to
#              new-window in the root table (not recommended) means a plain
#              ‘c’ will create a new window. 
#
#              `-n is an alias for -T root.`
#
#              Keys may also be bound in custom key tables and the
#              switch-client -T command used to switch to them from a key
#              binding.  The -r flag indicates this key may repeat, see the
#              repeat-time option.
# 
#              To view the default bindings and possible commands, see the
#              list-keys command.

#
# https://medium.freecodecamp.org/tmux-in-practice-series-of-posts-ae34f16cfab0
#


# ={========================================================================== 
# *tmux-prefix*
# 1. Consider remapping CAPSLOCK to CONTROL within your operating system.
# 2. Consider remapping CTRL-b to CTRL-a within your operating system.
#
# remap default prefix, C-b to C-a. However, tool-screen uses C-a so change
# screen key mapping
# https://superuser.com/questions/422126/remap-ctrl-a-in-gnu-screen
# To make it CTRL+J, use the following in .screenrc.
# escape ^Jj

set -g prefix C-a
unbind C-b
bind C-a send-prefix


# ={========================================================================== 
# *tmux-binding*
#
# CTRL-b ?    List all keybindings


# ={========================================================================== 
# *tmux-move* *tmux-session* *tmux-window* *tmux-pane*
#
# A tmux session is, put simply, and container for windows and panes. A window
# contains one or more panes.
# 
# tmux new -s session_name
#     creates a new tmux session named session_name
# 
# tmux attach -t session_name
#     attaches to an existing tmux session named session_name
# tmux a
#     attaches t the first available session.
# 
# tmux switch -t session_name
#     switches to an existing session named session_name
# 
# tmux list-sessions
# tmux ls
#     lists existing tmux sessions
# 
# tmux detach (prefix + d)
# 
# tmux kill-session -t session-name

# default key for window
#
# create and kill
# bind-key    -T prefix       c                     new-window
# bind-key    -T prefix       &                     confirm-before -p "kill-window #W? (y/n)" kill-window
#
# switch
# bind-key    -T prefix       0                     select-window -t :=0
# bind-key    -T prefix       1                     select-window -t :=1
# bind-key    -T prefix       2                     select-window -t :=2
# bind-key    -T prefix       3                     select-window -t :=3
# bind-key    -T prefix       4                     select-window -t :=4
# bind-key    -T prefix       5                     select-window -t :=5
# bind-key    -T prefix       6                     select-window -t :=6
# bind-key    -T prefix       7                     select-window -t :=7
# bind-key    -T prefix       8                     select-window -t :=8
# bind-key    -T prefix       9                     select-window -t :=9
#
# rename window title
#
# bind-key    -T prefix       ,                     command-prompt -I "#W" "rename-window -- '%%'"
#
# split and kill
#
# CTRL-b %    Split the current pane into two, left and right.
# CTRL-b "    `split` the current pane into two, top and bottom.
# bind-key    -T prefix       "                     split-window
#
# to kill pane which is created by `split-window`
# prefix x    `kill pane`

# Previos window since 'p' is used for paste instead.
# bind P previous-window

# list windows (shows tree and able to select one of windows)
# bind-key    -T prefix       w                     choose-tree -Zw
# 
# this is attempt to switch windows but DO NOT WORK so use `choose-tree` instead
# bind -n C-p previous-window -a -t :.-
# bind -n C-n next-window -a


# pane navigation as vim
setw -g mode-keys vi
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key h
bind-key h select-pane -L
unbind-key l
bind-key l select-pane -R


# ={========================================================================== 
# *tmux-source* 
# Force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf


# ={========================================================================== 
# *tmux-copy* copy mode mappings
# 
# *tmux-man*
#
# WINDOWS AND PANES         top
#      A tmux window may be in one of two modes.  The default permits direct
#      access to the terminal attached to the window.  The other is copy mode,
#      which permits a section of a window or its history to be copied to a
#      paste buffer for later insertion into another window.  This mode is
#      entered with the copy-mode command, bound to ‘[’ by default.  It is
#      also entered when a command that produces output, such as list-keys, is
#      executed from a key binding.
# 
#      Commands are sent to copy mode using the -X flag to the send-keys com‐
#      mand.  When a key is pressed, copy mode automatically uses one of two
#      key tables, depending on the mode-keys option: copy-mode for emacs, or
#      copy-mode-vi for vi.  Key tables may be viewed with the list-keys com‐
#      mand.

# tmux in practice: the scrollback buffer
# https://medium.freecodecamp.org/tmux-in-practice-scrollback-buffer-47d5ffa71c93
#
# trigger copy mode by up arrow key. note that termail uses shift-page up/down
# for scrolling but S-PageUp do not work in tmux.
unbind [
bind -n PageUp copy-mode

# To exit copy-mode, press Enter and note that can use mouse scroll to enter and
# to scroll tmux buffer.

# Once you’re in copy mode, you can continue pressingM-Up to scroll 1 line up.
# The usual PageDown and PageUp controls are available to scroll by whole
# screen, and extra M-PageDown and M-PageUp to scroll by a half of screen
# (really convenient).

# Scroll up/down by 1 line, half screen, whole screen
# M-PageUp where M is Alt key
bind -T copy-mode-vi Up               send-keys -X scroll-up
bind -T copy-mode-vi Down             send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp         send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown       send-keys -X halfpage-down
bind -T copy-mode-vi PageDown         send-keys -X page-down
bind -T copy-mode-vi PageUp           send-keys -X page-up

# for selection
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection

# this means <prefix> p. S-insert works instead
unbind p
bind p paste-buffer


# Copy from tmux buffer to system buffer (clipboard)
#
# For this to happen, you need to install xclip on your computer. Do it as:
# sudo apt-get install --assume-yes xclip
#
#       xclip - command line interface to X selections (clipboard)
#
#       -selection
#              specify which X selection to use, options are "primary"  to  use
#              XA_PRIMARY  (default),  "secondary"  for  XA_SECONDARY or "clip‐
#              board" for XA_CLIPBOARD
#
#       -i, -in
#              read  text  into  X  selection  from  standard  input  or  files
#              (default)
#
#       -f, -filter
#              when  xclip  is  invoked in the in mode with output level set to
#              silent (the defaults), the filter option  will  cause  xclip  to
#              print the text piped to standard in back to standard out unmodi‐
#              fied

# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"
# copy tmux seleciton using keys into both primary and secondary 
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"


# Tmux copy with mouse drag
# You can enable ‘mouse mode’, using which you can copy text into `tmux buffer` 
# by mouse drag.
#
# Note that if your tmux version is 2.1 or above, you need to include the
# following line instead of the above two
set -g mouse on

# But the problem is:
#
# By default, when you select text with the mouse in tmux, it get’s copied to
# buffer, and you’re immediately dropped out of the copy mode. Your current
# scroll position is reset by the end of the output, and you’re put in a command
# prompt mode.
#
# But now I can’t do normal copy-paste with mouse!
#
# You’ll notice that now all your selections will go to tmux buffer, and not
# clipboard buffer. Of course, you can enable copying to system clipboard as
# described in a section above. However, you can notice that you can’t double
# click to select a complete word with vi’s tmux copy-pasting shortcuts + mouse
# option enabled.

# So let’s tweak this. We don’t want to be kicked off the copy mode. We don’t
# want the selection cleared on the mouse drag end event. Text from the
# selection can be copied on the mouse left click afterwards.

# Do not copy selection and cancel copy mode on drag end event
# Prefer iTerm style selection: select, then mouse click to copy to buffer

# this works:
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  send-keys -X copy-pipe "pbcopy" \;\
  send-keys -X clear-selection

# this works but requires to press enter to get prompt back and this is the same
# as the above so prefer the above
#
# tmux copy mouse selected text to clipboard automatically on mouse release — 
# Stack Overflow — 
# https://stackoverflow.com/questions/36815879/tmux-copy-mouse-selected-text-to-clipboard-automatically-on-mouse-release
# 
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard"


# The other fix: just press SHIFT button when copying, and now you can copy as
# if Tmux doesn’t exist! :)


# Copy from a remote server
# Install xclip on the remote Ubuntu/Linux server, and add the line mentioned
# above (bind -t vi-copy y copy-pipe "xclip -sel clip -i") to ~/.tmux.conf on
# that server. Also, pass -X option when making SSH connection to the server,
# like so:
#
# ssh -X remoteuser@remotehost
#
# And after that everything you copy into remote’s Tmux buffer will get copied
# over to local clipboard. Magic!


# ={========================================================================== 
# *tmux-logging*
#
# https://github.com/tmux-plugins/tmux-logging
# 
# cd ~/Downloads
# git clone https://github.com/tmux-plugins/tmux-logging
# 
# 1. Logging
# 
# Key binding: prefix + shift + p
# File path: $HOME (user home dir)
# File name format:
# 
# tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
# 
# tmux-my-session-0-1-20140527T165614.log
# 
# Toggles (start/stop) logging in the current pane.

# run-shell ~/Downloads/tmux-logging/logging.tmux


# ={========================================================================== 
# *tmux-statusline*
# Status bar customization

# set -g status-bg white
# set -g status-fg white
# set -g status-interval 5
# set -g status-left-length 90
# set -g status-right-length 60
# set -g status-left "#[fg=Green]#(whoami)#[fg=white]::#[fg=blue] \
# (hostname - s)#[fg=white]::##[fg=yellow]#(curl ipecho.net/plain;echo)"
# 
# set -g status-justify left
# set -g status-right '#[fg=Cyan]#S #[fg=white]%a %d %b %R' 
